name: Assign PRs to Project
on:
  #issues:
  #  types: [ opened ]

  #pull_request:
  #  types: [ opened ]

  # important to use pull_request_target here to run code from 'main' not the PR, 
  # with access to PAT - and safe permission to make changes to the project
  pull_request_target:
    types: [ opened, labeled ]
    
# github-script: https://github.com/actions/github-script
# -> points to github rest (octokit) reference doc

# github PAT: https://github.com/settings/tokens
# must have full repo access

# FIXME how can I prevent a user from creating a PR and stealing my token?
# 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    
# curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ghp_..." https://api.github.com/projects/1/columns?owner=zpqrtbnk&repo=test-repo
# curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ghp_..." https://api.github.com/projects/1/columns?owner=zpqrtbnk-alt&repo=test-repo-alt
    
jobs:
  assign:
    runs-on: ubuntu-latest
    name: Assign
    steps:
    - name: Assign
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.MY_GITHUB_TOKEN_TESTREPO }}
        script: |
            //const project_name = 'The API Team Board'
            //const column_name = 'Drafting'
            
            const project_name = 'test-project'
            const column_name = 'To do'
            
            function firstOrDefault(items, predicate) {
                for (const item of items) {
                    if (predicate(item)) {
                        return item
                    }
                }
                return null
            }
            
            // find the project
            console.log('find project...')
            const projects = await github.projects.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
            })
            console.log(`retrieved ${projects.data.length} projects.`)
            const project = firstOrDefault(projects.data, (x) => x.name === project_name)
            if (!project) {
                core.setFailed(`Failed to find project "${project_name}".`)
                return
            }
            else {
                console.log(`project '${project_name}' id: ${project.id}.`)
            }

            // find the column
            console.log('find column...')
            const columns = await github.projects.listColumns({
                project_id: project.id
            })
            console.log(`retrieved ${columns.data.length} columns.`)
            const column = firstOrDefault(columns.data, (x) => x.name === column_name)
            if (!column) {
                core.setFailed(`Failed to find column "${column_name}" in project ${project.name}.`)
                return
            }
            else {
                console.log(`column '${column_name}' id: ${column.id}.`)
            }
            
            // determine content type
            console.log('determine content type...')
            const event_name = context.eventName
            var content_type = null
            var item_number = null
            var item_id = null
            if (event_name === 'issues') {
                content_type = 'Issue'
                // temp!
                core.setFailed(`Unsupported: issue.`)
                return
                item_number = context.issue.number
                item_id = context.issue.id
            }
            if (event_name === 'pull_request' || event_name === 'pull_request_target') {
                content_type = 'PullRequest'
                item_number = context.payload.pull_request.number
                item_id = context.payload.pull_request.id
            }
            if (!content_type) {
                core.setFailed(`Unexpected event name "${event_name}".`)
                return
            }
            else {
                console.log(`content type: ${content_type}.`)
            }
            
            // get the item
            console.log('get the item...')
            const item = await github.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: item_number
            })
            if (!item) {
                core.setFailed(`Failed to get item ${item_number}.`)
                return
            }
            else {                
                console.log(`${content_type} #${context.issue.number} id: ${item.data.id}.`)
                if (item_id === item.data.id) {
                    console.log(`item_id: ${item_id}`)
                }
                else {
                    console.log(`but 'context.payload' provides item_id: ${item_id} and meh?`)
                }
            }
                        
            console.log('create the card...')
            console.log(`in column ${column.id} for item ${item_id} of type ${content_type}`)
            await github.projects.createCard({
                column_id: column.id,
                //note:,
                content_id: item_id,
                content_type: content_type
            })
            console.log('created')
